package form

// FormItem automatically manages the relationship between labels, inputs,
// and their error states through context propagation.
//
// Basic usage:
//
//  @form.FormItem(form.NewFormItemProps()) {
//      <label>Username</label>
//      <input type="text" />
//  }
//
// With form context and validation:
//
//  @form.FormItem(form.NewFormItemProps().WithFormItem(formData.Username)) {
//      <label {ui.NewLabel(ui.LabelProps().
//          WithinContext(ctx, formData.Username.ID).
//          WithRequired(true))...}
//      >
//          Username
//      </label>
//      <input {ui.NewInput(ui.InputProps().
//          WithinContext(ctx, formData.Username.ID))...}
//          type="text"
//          placeholder="Enter username"
//      />
//  }
templ FormItem(props *FormItemProps) {
	{{
	if props.Ctx != nil {
		ctx = AttachFormItemContext(ctx, props.Ctx)
	}
	}}
	<div class="space-y-2" data-role="form-item">
		{ children... }
		if props.Ctx != nil && props.Ctx.Invalid {
			<div class="text-sm text-destructive mt-1">{ props.Ctx.ErrorMessage } </div>
		}
	</div>
}
