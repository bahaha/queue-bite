// Code generated by MockGen. DO NOT EDIT.
// Source: queue-bite/internal/features/hostdesk/service (interfaces: HostDesk)
//
// Generated by this command:
//
//      mockgen queue-bite/internal/features/hostdesk/service HostDesk
//

// Package mock_service is a generated GoMock package.
package service

import (
        context "context"
        domain "queue-bite/internal/domain"
        domain0 "queue-bite/internal/features/waitlist/domain"
        reflect "reflect"

        gomock "go.uber.org/mock/gomock"
)

// MockHostDesk is a mock of HostDesk interface.
type MockHostDesk struct {
        ctrl     *gomock.Controller
        recorder *MockHostDeskMockRecorder
        isgomock struct{}
}

// MockHostDeskMockRecorder is the mock recorder for MockHostDesk.
type MockHostDeskMockRecorder struct {
        mock *MockHostDesk
}

// NewMockHostDesk creates a new mock instance.
func NewMockHostDesk(ctrl *gomock.Controller) *MockHostDesk {
        mock := &MockHostDesk{ctrl: ctrl}
        mock.recorder = &MockHostDeskMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHostDesk) EXPECT() *MockHostDeskMockRecorder {
        return m.recorder
}

// CheckIn mocks base method.
func (m *MockHostDesk) CheckIn(ctx context.Context, party *domain0.QueuedParty) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "CheckIn", ctx, party)
        ret0, _ := ret[0].(error)
        return ret0
}

// CheckIn indicates an expected call of CheckIn.
func (mr *MockHostDeskMockRecorder) CheckIn(ctx, party any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIn", reflect.TypeOf((*MockHostDesk)(nil).CheckIn), ctx, party)
}

// GetCurrentCapacity mocks base method.
func (m *MockHostDesk) GetCurrentCapacity(ctx context.Context) (int, domain.Version, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetCurrentCapacity", ctx)
        ret0, _ := ret[0].(int)
        ret1, _ := ret[1].(domain.Version)
        ret2, _ := ret[2].(error)
        return ret0, ret1, ret2
}

// GetCurrentCapacity indicates an expected call of GetCurrentCapacity.
func (mr *MockHostDeskMockRecorder) GetCurrentCapacity(ctx any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentCapacity", reflect.TypeOf((*MockHostDesk)(nil).GetCurrentCapacity), ctx)
}

// NotifyPartyReady mocks base method.
func (m *MockHostDesk) NotifyPartyReady(ctx context.Context, party *domain0.QueuedParty) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "NotifyPartyReady", ctx, party)
        ret0, _ := ret[0].(error)
        return ret0
}

// NotifyPartyReady indicates an expected call of NotifyPartyReady.
func (mr *MockHostDeskMockRecorder) NotifyPartyReady(ctx, party any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyPartyReady", reflect.TypeOf((*MockHostDesk)(nil).NotifyPartyReady), ctx, party)
}

// PreserveSeats mocks base method.
func (m *MockHostDesk) PreserveSeats(ctx context.Context, partyID domain.PartyID, seats int, version domain.Version) (bool, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "PreserveSeats", ctx, partyID, seats, version)
        ret0, _ := ret[0].(bool)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// PreserveSeats indicates an expected call of PreserveSeats.
func (mr *MockHostDeskMockRecorder) PreserveSeats(ctx, partyID, seats, version any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreserveSeats", reflect.TypeOf((*MockHostDesk)(nil).PreserveSeats), ctx, partyID, seats, version)
}

// ReleasePreservedSeats mocks base method.
func (m *MockHostDesk) ReleasePreservedSeats(ctx context.Context, partyID domain.PartyID) (bool, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "ReleasePreservedSeats", ctx, partyID)
        ret0, _ := ret[0].(bool)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// ReleasePreservedSeats indicates an expected call of ReleasePreservedSeats.
func (mr *MockHostDeskMockRecorder) ReleasePreservedSeats(ctx, partyID any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleasePreservedSeats", reflect.TypeOf((*MockHostDesk)(nil).ReleasePreservedSeats), ctx, partyID)
}

// ServeImmediately mocks base method.
func (m *MockHostDesk) ServeImmediately(ctx context.Context, party *domain.Party) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "ServeImmediately", ctx, party)
        ret0, _ := ret[0].(error)
        return ret0
}

// ServeImmediately indicates an expected call of ServeImmediately.
func (mr *MockHostDeskMockRecorder) ServeImmediately(ctx, party any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeImmediately", reflect.TypeOf((*MockHostDesk)(nil).ServeImmediately), ctx, party)
}

// ServiceComplete mocks base method.
func (m *MockHostDesk) ServiceComplete(ctx context.Context, party *domain0.QueuedParty) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "ServiceComplete", ctx, party)
        ret0, _ := ret[0].(error)
        return ret0
}

// ServiceComplete indicates an expected call of ServiceComplete.
func (mr *MockHostDeskMockRecorder) ServiceComplete(ctx, party any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceComplete", reflect.TypeOf((*MockHostDesk)(nil).ServiceComplete), ctx, party)
}

